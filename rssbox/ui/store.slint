import { Translator, Translation} from "./translator.slint";

export struct RssEntry {
    uuid: string,
    url: string,
    title: string,
    pub-date: string,
    tags: string,
    author: string,
    summary: string,

    suuid: string,
    is-read: bool,
}

export struct RssList {
    uuid: string,
    name: string,
    url: string,
    use-proxy: bool,
    icon-index: int,
    feed_format: string,

    update-time: string,
    is-mark: bool,
    entry: [RssEntry],

    unread-counts-flag: bool,
}

export struct MessageItem {
    text: string,
    text-type: string,
}

export struct IconDialogSetting {
    show: bool,
    icons: [image],
}

export struct RssDialogSetting {
    show: bool,
    handle-type: string,
}

export struct RssConfig {
    uuid: string,
    name: string,
    url: string,
    use-proxy: bool,
    icon-index: int,
    feed_format: string,
}

export struct OkCancelDialogSetting {
    title-type: string,
    title-text: string,
    body-text: string,

    handle-type: string,
    handle-uuid: string,
}

export struct SettingUI {
    font-size: string,
    font-family: string,
    win-width: string,
    win-height: string,
    language: string,
}

export struct SettingRSS {
    sync-interval: int,
    sync-interval-enabled: bool,
    sync-timeout: int,
    browser: string,
    start-sync: bool,
    trash-count: int,
}

export struct SettingProxy {
    url: string,
    port: string,
}

export struct SettingDialogConfig {
    show: bool,
    ui: SettingUI,
    rss: SettingRSS,
    proxy: SettingProxy,
}

export struct AboutDialog {
    show: bool,
    title: string,
    text: string,
    sponsor: string,
}

export global Store  {
    in-out property<[RssEntry]> rss-entry: [
        {
            uuid: "42342e2jkfjk",
            url: "https://www.zhihu.com/rss",
            pub-date: "2023-10-22 23:12:34",
            tags: "rust",
            is-read: false,
            author: "hello",
            title: "Actors may modify their own private state, but can only affect each other indirectly through messaging (removing the need for lock-based synchronization).",
            summary: "The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation. \nIn response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
        },
        {
            uuid: "xx2342jkfjk",
            url: "https://bing.com",
            pub-date: "2023-11-12 13:12:34",
            tags: "slint-ui, rust",
            is-read: true,
            title: "hello world",
        },
        {
            uuid: "2342jkfjk",
            url: "http://azure.com",
            pub-date: "2023-11-12 13:12:34",
            is-read: true,
            title: "hello rust",
        }
    ];

    in-out property<bool> unread-count-flag: false;
    in-out property<bool> update-time-flag: false;
    in-out property<string> current-rss-uuid: rss-lists[0].uuid;
    in-out property<[RssList]> rss-lists: [
        {
            uuid: "unread-uuid",
            name: translator.rss-unread,
            is-mark: true,
            use_proxy: false,
            icon-index: 0,
        },
        {
            uuid: "favorite-uuid",
            name: translator.rss-favorite,
            is-mark: true,
            use_proxy: false,
            icon-index: 0,
        },
    ];


    in-out property<RssDialogSetting> rss-dialog-setting: { show: false };

    in-out property<MessageItem> message;
    in-out property<OkCancelDialogSetting> ok-cancel-dialog-setting;
    in-out property<Translation> translator: Translator.translation(setting-dialog-config.ui.language == "cn");

    in-out property<SettingDialogConfig> setting-dialog-config: {
        show: false,
        ui: {
            font-size: "20",
            font-family: "SourceHanSerifCN",
            win-width: "1200",
            win-height: "1000",
            language: "cn",
        },
        rss: {
            sync-interval: 60,
            sync-timeout: 15,
            browser: "brave"
        },
    };


    in-out property<AboutDialog> about-dialog: {
        show: false,
        title: "RssBox v1.0.0",
        text: "Based on Slint-UI. Copyright 2022-2030 The Heng30 Company Ltd. All rights reserved. The program is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.",
        sponsor: "0xf1199999751b1a3A74590adBf95401D19AB30014",
    };

    in-out property<{show: bool, text-cn: string, text-en: string}> help-dialog: {
        show: false,
        text-cn:  "  1. 新建RSS源时，注意选择RSS协议格式。\n"
                + "  2. 启用自动同步后，同步间隔配置才会生效。\n"
                + "  3. 删除的条目会被标记为永久删除，并保存到垃圾箱。被删除的条目重新刷新也不会加入展示列表。清除垃圾箱可恢复。\n"
                + "  4. 不设置浏览器，则使用默认浏览器打开链接。\n",
        text-en:  "  1. When creating a new RSS feed, pay attention to selecting the RSS protocol format.\n"
                + "  2. The synchronization interval configuration will only take effect after enabling automatic synchronization.\n"
                + "  3. Deleted items will be permanently marked as deleted and kept in the trash. Refreshing the deleted items will not add them back to the display list. Trash can be cleared to restore them.\n"
                + "  4. If no browser is set, the default browser will be used to open the link.\n"
    };

    in-out property<IconDialogSetting> icon-dialog-setting: {
        show: false,
        icons : [
            @image-url("./icons/1.svg"), @image-url("./icons/2.svg"),
            @image-url("./icons/3.svg"), @image-url("./icons/4.svg"),
            @image-url("./icons/5.svg"), @image-url("./icons/6.svg"),
            @image-url("./icons/7.svg"), @image-url("./icons/8.svg"),
            @image-url("./icons/9.svg"), @image-url("./icons/10.svg"),
            @image-url("./icons/11.svg"), @image-url("./icons/12.svg"),
            @image-url("./icons/13.svg"), @image-url("./icons/14.svg"),
            @image-url("./icons/15.svg"), @image-url("./icons/16.svg"),
            @image-url("./icons/17.svg"), @image-url("./icons/18.svg"),
            @image-url("./icons/19.svg"), @image-url("./icons/20.svg"),
            @image-url("./icons/21.svg"), @image-url("./icons/22.svg"),
            @image-url("./icons/23.svg"), @image-url("./icons/24.svg"),
            @image-url("./icons/25.svg"), @image-url("./icons/26.svg"),
            @image-url("./icons/27.svg"), @image-url("./icons/28.svg"),
            @image-url("./icons/29.svg"), @image-url("./icons/30.svg"),
            @image-url("./icons/31.svg"), @image-url("./icons/32.svg"),
            @image-url("./icons/33.svg"), @image-url("./icons/34.svg"),
            @image-url("./icons/35.svg"), @image-url("./icons/36.svg"),
            @image-url("./icons/37.svg"), @image-url("./icons/38.svg"),
            @image-url("./icons/39.svg"), @image-url("./icons/40.svg"),
            @image-url("./icons/41.svg"), @image-url("./icons/42.svg"),
            @image-url("./icons/43.svg"), @image-url("./icons/44.svg"),
            @image-url("./icons/45.svg"), @image-url("./icons/46.svg"),
            @image-url("./icons/47.svg"), @image-url("./icons/48.svg"),
        ],
    };

    pure function rss-name(uuid: string, name: string) -> string {
        if (uuid == "unread-uuid") {
            return Store.translator.rss-unread;
        }  else if (uuid == "favorite-uuid") {
            return Store.translator.rss-favorite;
        }

        return name;
    }

    public function toggle-unread-count-flag() {
        Store.unread-count-flag = !Store.unread-count-flag;
    }

    public function toggle-update-time-flag() {
        Store.update-time-flag = !Store.update-time-flag;
    }
}

