import { Theme } from "../../theme.slint";
import { Store } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { CenterLayout } from "../../base/center-layout.slint";
import { Tag } from "../../base/tag.slint";

export component Entry inherits Rectangle {
    in-out property title <=> title-txt.text;
    in-out property summary <=> summary-txt.text;
    in-out property pub-date-text <=> pub-date-txt.text;
    in-out property<string> author;
    in-out property<string> tag-text;
    in-out property<bool> is-read: false;
    in-out property<string> uuid;
    in-out property<string> suuid;
    in-out property<string> url;

    background: Theme.light-fill-color;
    height: vbox.preferred-height;
    border-radius: Theme.border-radius;

    drop-shadow-blur: Theme.padding * 2;
    drop-shadow-offset-x: Theme.padding;
    drop-shadow-offset-y: Theme.padding;
    drop-shadow-color: touch-1.has-hover || touch-2.has-hover || touch-3.has-hover ?  Theme.darker-fill-color.darker(20%) : Theme.dark-fill-color;

    public function up-summary(flag: bool) {
        if (flag) {
            touch-3.visible = false;
        } else {
            if (root.summary == "") {
                touch-3.visible = false;
            } else {
                touch-3.visible = true;
            }
        }
    }

    touch-1 := TouchArea { }

    vbox := VerticalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 2;

        title-txt := Text {
            wrap: word-wrap;
            font-size: Theme.title3-font-size;
            color: touch-2.has-hover ? Theme.link-text-color :  (root.is-read && Store.current-rss-uuid != "favorite-uuid" ? Theme.have-read-text-color : Theme.primary-text-color);

            touch-2 := TouchArea {
                mouse-cursor: self.has-hover ? pointer : default;
                clicked => {
                    Logic.set-read-entry(Store.current-rss-uuid, root.uuid);
                    Logic.open-url(root.url);

                    Logic.toggle-unread-count-flag("unread-uuid");
                    if (Store.current-rss-uuid == "unread-uuid") {
                        Logic.toggle-unread-count-flag(root.suuid);
                    } else {
                        Logic.toggle-unread-count-flag(Store.current-rss-uuid);
                    }
                }
            }
        }


        touch-3 := TouchArea {
            visible: summary-txt.text != "";
            height: summary-txt.height;
            mouse-cursor: text;
            summary-txt := TextInput {
                height: parent.visible ? self.preferred-height : 0px;
                color: root.is-read ? Theme.have-read-text-color : Theme.regular-text-color;
                wrap: word-wrap;
                read-only: true;
                single-line: false;

            }
        }

        HorizontalLayout {
            padding: Theme.padding;
            alignment: space-between;

            HorizontalLayout {
                visible: root.tag-text != "";
                spacing: Theme.spacing;
                for text[index] in Logic.parse-tags(root.tag-text) : Tag {
                    background: Theme.tag-colors[Math.mod(index, Theme.tag-colors.length)];
                    text-color: self.background.darker(100%);
                    text: text;
                }
            }

            HorizontalLayout {
                alignment: end;
                spacing: Theme.padding * 4;

                author-txt := Text {
                    visible: root.author != "";
                    font-size: Theme.default-font-size - 4px;
                    color: Theme.secondary-text-color;
                    text: Store.translator.author + root.author;
                }

                pub-date-txt := Text {
                    font-size: Theme.default-font-size - 4px;
                    color: Theme.secondary-text-color;
                }
            }
        }
    }
}
